<?xml version="1.0" encoding="utf-8"?>
<klayout-macro>
 <description/>
 <description>link_gdsfactory_python</description>
 <version/>
 <category>pymacros</category>
 <prolog/>
 <epilog/>
 <doc/>
 <autorun>false</autorun>
 <autorun-early>false</autorun-early>
 <shortcut/>
 <show-in-menu>true</show-in-menu>
 <group-name/>
 <menu-path>gdsfactory.end</menu-path>
 <interpreter>python</interpreter>
 <dsl-interpreter-name/>
 <text>
import pya
import sys
import json
import importlib
import platform
from pathlib import Path

env_dir = pya.FileDialog.ask_existing_dir("Select directory of Python environment to link:", "")
if env_dir is None:
    quit()

import_packages = [
    'click',
    'flatdict',
    'gdspy',
    'jsondiff',
    'loguru',
    'lxml',
    'matplotlib',
    'numpy',
    'omegaconf',
    'orjson',
    'pandas',
    'pydantic',
    'pytest',
    'pytest-regressions',
    'pyyaml',
    'qrcode',
    'rectpack',
    'scipy',
    'shapely',
    'toolz',
    'tqdm',
    'types-PyYAML',
    'typing_extensions',
    'watchdog',
    'xmltodict',
    'gdsfactory',
    'flayout'
]
env_dir = Path(env_dir)

lib_dir = env_dir / "lib"

if not lib_dir.exists():
    raise ImportError(f"Could not find a 'lib' directory in {env_dir}.")

conda_meta = list(env_dir.glob("conda-meta"))[0]
if not conda_meta:
    raise ImportError("The environment does not appear to be a conda environment, issues are likely!")

# Figure out the python version
py_version = list(conda_meta.glob("python*"))[0].name.split("-")[1].split(".")

# Add path to import all extra modules
extra_lib_paths = [
    env_dir / f"python{py_version[0]}{py_version[1]}.zip"
]


if platform.system == "Windows":
    site_packages_dir = lib_dir / "site-packages"
    extra_lib_paths.extend(
    [
        env_dir,
        env_dir / "DLLs",
        site_packages_dir
        ]
    )

else: # if platform.system == "Linux":
    py_dir = lib_dir / f"python{py_version[0]}.{py_version[1]}"
    site_packages_dir = py_dir / "site-packages"
    extra_lib_paths.extend(
    [
        py_dir / "lib-dynload",
        site_packages_dir
        ]
    )

extra_paths_to_prepend = []
for p in extra_lib_paths:
    path = str(p)
    if path not in sys.path:
        extra_paths_to_prepend.append(path)

sys.path = [*extra_paths_to_prepend, *sys.path]

for package in import_packages:
  possible_package_dirs = list(site_packages_dir.glob(f"{package}*"))
  if python_lib_dir / package in possible_package_dirs:
    print(f"Found system package {package}, which will be included by default.")

  if site_packages_dir / package in possible_package_dirs:
    print(f"Found user-installed {package} (in site-packages), which will be included by default.")

  else:
      package_info_dir =  list(site_packages_dir.glob(f"{package}-*.dist-info"))
      print(f"Looking for package {package} with package info at {package_info_dir}")

      if len(package_info_dir) == 0:
        continue

      if len(package_info_dir) > 1:
        print(f"Multiple info directories for {package} found! Skipping \n\tDirectories: {package_info_dir}")
        continue

      package_info_file = package_info_dir[0] / "direct_url.json"

      if not package_info_file.exists():
        print(f"Importing {package} from environment.")
        continue

      with open(package_info_file, 'r') as f:
        # Should be in format: "file:///path/to/local/package"
        try:
            url = json.load(f)["url"]
            package_import_path = str(pathlib.Path(url).as_posix()).lstrip("file:")

            if platform.system == "Windows":
                package_import_path = package_import_path[1:]
            print(f"Importing package from {package_import_path}.")

        except Exception as err:
            print(err)

      if package_import_path not in sys.path and pathlib.Path(package_import_path).exists():
        print(f"Appending package location to sys.path: {package_import_path}")
        sys.path.append(package_import_path)

  print(f"Importing {package}...")
  importlib.import_module(package)

# sys.path.remove(package_import_path)

</text>
</klayout-macro>
